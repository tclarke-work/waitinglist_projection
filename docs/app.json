[{"name":"server.R","content":"#\r\n# This is the server logic of a Shiny web application. You can run the\r\n# application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nrequire(data.table)\r\nrequire(reactable)\r\nrequire(shinyjs)\r\n\r\nfunction(input, output, session) {\r\n    \r\n    session$onSessionEnded(function(){\r\n        \r\n        stopApp()\r\n        \r\n    })\r\n    \r\n    observeEvent(input$btn_toggle,{\r\n        \r\n        toggle(id=\"baseline_controls\")\r\n        \r\n        \r\n    })\r\n    \r\n    base_assumptions<-as.data.table(readxl::read_excel(\"baseline_assumptions.xlsx\"))\r\n    \r\n    cols_exclude<-c(\"var\",\"desc\")\r\n    \r\n    la_list<-names(base_assumptions)[!names(base_assumptions) %in% cols_exclude]\r\n    \r\n    output$ui_la_select<-renderUI({\r\n        \r\n        selectizeInput(\"select_la\",\"Select scenario\",choices=la_list,multiple=F)\r\n        \r\n    })\r\n    \r\n    proj_res<-lapply(la_list,function(x){\r\n        \r\n        b_values<-base_assumptions[,.SD,.SDcols=c(\"var\",x)]\r\n        \r\n        names(b_values)[names(b_values)==x]<-\"value\"\r\n        \r\n        list(projections=reactiveValues(baseline=NA,intervention=NA,update_col=NA),\r\n             baseline_values=reactiveValues(baseline=b_values)\r\n        )\r\n        \r\n    })\r\n    \r\n    names(proj_res)<-la_list\r\n    \r\n    inline_control<-function(...){\r\n        \r\n        div(...,style=\"width: 23%;display: inline-block;\")\r\n        \r\n    }\r\n    \r\n    output$ui_baseline_controls<-renderUI({\r\n        \r\n        list(\r\n            inline_control(numericInput(\"num_nWaiting\",\"Current waiting list size - initials\",value=4000)),\r\n        inline_control(numericInput(\"num_nWaiting_follow\",\"Current waiting list size - 2nd appts\",value=1000)),\r\n        inline_control(numericInput(\"num_refAll_baseline\",\"New referrals per week\",value=60)),\r\n        inline_control(numericInput(\"num_accReferrals_baseline\",\"Acceptance rate (%)\",value=50,min=0,max=100)),\r\n        inline_control(numericInput(\"num_leftReferrals_baseline\",\"People leaving the waiting list per week\",value=15)),\r\n        inline_control(numericInput(\"num_appts_init_baseline\",\"Initial appts available per week\",value=20)),\r\n        inline_control(numericInput(\"num_appts_dna_baseline\",\"Initial appt utilisation rate (%)\",min=0,value=90,max=100)),\r\n        inline_control(numericInput(\"num_appts_follow_baseline\",\"2nd appts available per week\",value=10)),\r\n        inline_control(numericInput(\"num_followup_perc\",\"% of referrals needing 2nd appt\",value=50,min=0,max=100)),\r\n        inline_control(numericInput(\"num_reref_baseline\",\"Re-referral rate (% of rejected referrals)\",value=5,min=0,max=100)),\r\n        inline_control(numericInput(\"num_reref_lag\",\"Average weeks to re-referral\",value=12,min=0)),\r\n        inline_control(numericInput(\"num_wait_min\",\"Minimum waiting time (weeks)\",value=6,min=0)),\r\n        inline_control(numericInput(\"num_wait_max\",\"Maximum waiting time (weeks)\",value=52,min=0))\r\n        )\r\n        \r\n    })\r\n    \r\n    outputOptions(output,\"ui_baseline_controls\",suspendWhenHidden=F)\r\n    \r\n    trigger_switchProjections<-reactiveValues(counter=0)\r\n    \r\n    observeEvent({\r\n        lapply(base_assumptions$var,function(x){input[[x]]})\r\n        },ignoreNULL = T, ignoreInit = T,{\r\n        \r\n        trigger_switchProjections$counter<-isolate(trigger_switchProjections$counter) + 1\r\n        \r\n    })\r\n    \r\n    observeEvent(input$select_la,ignoreInit = T, ignoreNULL=T,{\r\n        \r\n        base_dat<-isolate(proj_res[[input$select_la]]$baseline_values$baseline)\r\n        \r\n        for(x in base_dat$var){\r\n            \r\n            val<-base_dat$value[base_dat$var==x]\r\n            \r\n            updateNumericInput(session,x,value=val)\r\n            \r\n            \r\n            \r\n        }\r\n        \r\n        \r\n    })\r\n    \r\n    \r\n    backlog_calc<-function(row,backlog,dat,followup_backlog){\r\n        \r\n        reref_lag<-dat[[\"reref_lag\"]][row]\r\n        \r\n        acc_rate<-dat[[\"acc_ref\"]][row]/100\r\n        \r\n        new_acc_ref<-dat[[\"new_ref\"]][row] * acc_rate\r\n        \r\n        if(row>reref_lag){\r\n            \r\n            inflow<- new_acc_ref + (dat[[\"reref\"]][row - reref_lag]/100) * (dat[[\"new_ref\"]][row-reref_lag] * (1-acc_rate) )\r\n            \r\n        }else{\r\n            inflow<-new_acc_ref + (dat[[\"reref\"]][1]/100) * (dat[[\"new_ref\"]][1] * (1-acc_rate) )\r\n        }\r\n        \r\n        init_appts<-round(dat[[\"appt_init\"]][row]*(dat[[\"dna_init\"]][row]/100))\r\n        \r\n        outflow<-dat[[\"left\"]][row] + init_appts\r\n        \r\n        new_follow_ups<-round(init_appts * (dat[[\"followup_perc\"]][row]/100))\r\n        \r\n        completed_follow_ups<-dat[[\"appt_follow\"]][row]\r\n        \r\n        list(init_appts_backlog=backlog + inflow - outflow,\r\n             followup_backlog=followup_backlog + new_follow_ups - completed_follow_ups\r\n        )\r\n        \r\n    }\r\n    \r\n    controls_lookup<-c(\"new_ref\"=\"New referrals\\nper week\",\r\n                       \"acc_ref\"=\"Accepted referrals\\nrate (%)\",\r\n                       \"left\"=\"Number leaving waiting\\nlist per week\",\r\n                       \"dna_init\"=\"Initial appts utilisation rate (%)\",\r\n                       \"appt_init\"=\"Initial appts completed\\nper week\",\r\n                       \"appt_follow\"=\"2nd appts completed\\nper week\",\r\n                       \"followup_perc\"=\"% requiring 2nd appt\",\r\n                       \"reref\"=\"Re-Referral rate\\n(% of rejected referrals)\",\r\n                       \"reref_lag\"=\"Average days to re-referral\")\r\n    \r\n    la_tracker<-reactiveValues(current=NA)\r\n    \r\n    calc_baseline<-function(){\r\n        \r\n        today<-lubridate::wday(Sys.Date(),week_start=1)\r\n        \r\n        if(today==1){\r\n            \r\n            dt_start<-Sys.Date()\r\n            \r\n        }else{\r\n            \r\n            dt_start<-Sys.Date() + (8-today)\r\n            \r\n        }\r\n        \r\n        base_df<-data.table(week=seq(dt_start,dt_start+(365*3),by=\"weeks\"),\r\n                            new_ref=input$num_refAll_baseline,\r\n                            acc_ref=input$num_accReferrals_baseline,\r\n                            left=input$num_leftReferrals_baseline,\r\n                            appt_init=input$num_appts_init_baseline,\r\n                            appt_follow=input$num_appts_follow_baseline,\r\n                            followup_perc=input$num_followup_perc,\r\n                            reref=input$num_reref_baseline,\r\n                            reref_lag=input$num_reref_lag,\r\n                            dna_init=input$num_appts_dna_baseline,\r\n                            backlog=NA,\r\n                            backlog_follow=NA)\r\n        \r\n        \r\n        init_backlog<-backlog_calc(1,input$num_nWaiting,base_df,followup_backlog = input$num_nWaiting_follow)\r\n        \r\n        base_df$backlog[1]<-init_backlog$init_appts_backlog\r\n        \r\n        base_df$backlog_follow[1]<-init_backlog$followup_backlog\r\n        \r\n        for(x in 2:nrow(base_df)){\r\n            \r\n            backlog_out<-backlog_calc(x,base_df$backlog[x-1],base_df,base_df$backlog_follow[x-1])\r\n            \r\n            base_df$backlog[x]<-backlog_out$init_appts_backlog\r\n            \r\n            base_df$backlog_follow[x]<-backlog_out$followup_backlog\r\n            \r\n        }\r\n        \r\n        base_df$sus_waitlist_size<-(base_df$new_ref*base_df$acc_ref/100)*input$num_wait_min + ((input$num_wait_max-input$num_wait_min)*(base_df$new_ref*base_df$acc_ref/100)/2)\r\n        \r\n        base_df$diff<-base_df$backlog - base_df$sus_waitlist_size\r\n        \r\n        base_df\r\n    }\r\n    \r\n    observeEvent(ignoreNULL=T,ignoreInit = T,\r\n                 {trigger_switchProjections$counter},{\r\n        \r\n        req(isolate(input$select_la))\r\n        \r\n        la<-input$select_la\r\n        \r\n        current_la<-isolate(la_tracker$current)\r\n        \r\n        la_change<-ifelse(is.na(current_la),T,ifelse(!current_la==la,T,F))\r\n        \r\n        base_df<-calc_baseline()\r\n        \r\n        if(!is.data.table(proj_res[[la]]$projections$baseline)|!la_change){\r\n        proj_res[[la]]$projections$baseline<-base_df[,grp:=\"Baseline\"]\r\n        \r\n        proj_res[[input$select_la]]$baseline_values$baseline<-rbindlist(lapply(base_assumptions$var,function(x){data.table(var=x,value=input[[x]])}))\r\n        \r\n        \r\n        }else{\r\n            \r\n            proj_res[[la]]$projections$baseline<-isolate(proj_res[[la]]$projections$baseline)\r\n            \r\n        }\r\n        \r\n        if(!is.data.table(proj_res[[la]]$projections$intervention)|!la_change){\r\n\r\n        proj_res[[la]]$projections$intervention<-copy(base_df)[,grp:=\"Intervention\"]\r\n        \r\n        }else{\r\n            \r\n            \r\n            \r\n            proj_res[[la]]$projections$intervention<-isolate(proj_res[[la]]$projections$intervention)\r\n            \r\n        }\r\n        \r\n        if(la_change){\r\n            \r\n            la_tracker$current<-la\r\n            \r\n        }\r\n       \r\n        \r\n    })\r\n    \r\n    output$proj_plot<-renderAmChart4({\r\n        \r\n        req(input$num_nWaiting,input$select_la)\r\n        \r\n        \r\n        req(proj_res[[input$select_la]]$projections$intervention,proj_res[[input$select_la]]$projections$baseline)\r\n        \r\n        \r\n        dat<-rbind(proj_res[[input$select_la]]$projections$intervention,proj_res[[input$select_la]]$projections$baseline)\r\n        \r\n        # ggplot(dat,aes(x=week,y=backlog,grp=grp,colour=grp))+geom_line()+\r\n        #     geom_hline(yintercept=proj_res$baseline$sus_waitlist_size[1],lty=\"dashed\")+\r\n        #     theme_bw() +\r\n        #     scale_y_continuous(limits=c(0,NA))+\r\n        #     ylab(\"Waiting list size\") +\r\n        #     annotate(\"text\", x =min(dat$week) + 365, y =proj_res$baseline$sus_waitlist_size[1] + 100, \r\n        #              label=\"Sustainable waiting list size\")\r\n        \r\n        dat<-dcast(dat[,.(week,sus_waitlist_size,backlog,grp)],week+sus_waitlist_size~grp,value.var=\"backlog\")\r\n        \r\n        amLineChart(\r\n            data=dat,\r\n            xValue=\"week\",\r\n            yValues=c(\"Intervention\",\"Baseline\",\"sus_waitlist_size\"),\r\n            yValueNames = list(Baseline=\"'Do nothing' projection\",Intervention=\"'To be' projection\",\r\n                               sus_waitlist_size=\"Sustainable waiting list\"),\r\n            yAxis=list(title=amText(text=\"Waiting list size - Initial appts\",fontSize = 16)),\r\n            xAxis=\"\",\r\n            animated=F,\r\n            legend=amLegend(position=\"right\"),\r\n            yLimits=c(0,max(c(dat$Baseline,dat$Intervention))*1.1),\r\n            lineStyle = list(`Baseline`=amLine(color = \"#fb9a99\"),Intervention=amLine(color=\"#1f78b4\"),\r\n                             sus_waitlist_size=amLine(color=\"#b2df8a\",dash=\"3,3\"))\r\n           \r\n        )\r\n    })\r\n    \r\n    output$proj_tb<-renderReactable({\r\n        \r\n        req(input$num_nWaiting,input$select_la)\r\n        \r\n        \r\n        req(proj_res[[input$select_la]]$projections$intervention,proj_res[[input$select_la]]$projections$baseline,input$num_wait_min,input$num_wait_max)\r\n        \r\n        \r\n        dat<-proj_res[[input$select_la]]$projections$intervention\r\n        \r\n        dat_orig<-proj_res[[input$select_la]]$projections$baseline\r\n        \r\n        #browser()\r\n        year_dates<-c(\r\n            dat$week[1 + 52],\r\n            dat$week[1 + 52*2],\r\n            dat$week[1 + 52*3]\r\n        )\r\n        \r\n        dat<-merge(dat[week %in% year_dates,.(Date=week,`'To be' backlog (target = 0)`=backlog,\r\n                                              `'To be' 2nd appts waiting`=backlog_follow)],\r\n              dat_orig[week %in% year_dates,.(Date=week,`'Do nothing' backlog`=backlog,`'Do nothing' 2nd appts waiting`=backlog_follow)],by=\"Date\"\r\n              )[,`Difference vs Do nothing`:=`'To be' backlog (target = 0)` - `'Do nothing' backlog`\r\n                ][,`Difference vs Do nothing (2nd appts)`:=`'To be' 2nd appts waiting` - `'Do nothing' 2nd appts waiting`\r\n                  ][,.(Date,`'To be' backlog (target = 0)`,`Difference vs Do nothing`,`'To be' 2nd appts waiting`,`Difference vs Do nothing (2nd appts)`)]\r\n        \r\n        names(dat)[2]<-paste0(\"'To be' initial appts waiting list size (target = \",isolate(unique(proj_res[[input$select_la]]$projections$baseline$sus_waitlist_size)),\")\")\r\n        \r\n        reactable(\r\n            dat,\r\n            columns=list(\r\n                Date=colDef(\"Projection Date\",format=colFormat(date=T))\r\n            ),\r\n            defaultColDef = colDef(format=colFormat(digits=0))\r\n        )\r\n        \r\n        \r\n    })\r\n    \r\n    \r\n    observeEvent(input$btn_reset,{\r\n        \r\n        proj_res[[input$select_la]]$projections$update_col<-NA\r\n        \r\n        proj_res[[input$select_la]]$projections$intervention<-copy(proj_res[[input$select_la]]$projections$baseline)[,grp:=\"Intervention\"]\r\n        \r\n    })\r\n    \r\n    \r\n    lapply(c(names(controls_lookup)),function(x){\r\n        output[[paste0(\"plot_\",x)]]<-renderAmChart4({\r\n            \r\n            require(rAmCharts4)\r\n            \r\n            req(input$num_nWaiting,input$select_la)\r\n            \r\n            req(proj_res[[input$select_la]]$projections$intervention)\r\n            \r\n            chart_df<-proj_res[[input$select_la]]$projections$intervention[,.SD,.SDcols=c(\"week\",x)]\r\n            \r\n            req(chart_df)\r\n            \r\n            if(!is.na(proj_res[[input$select_la]]$projections$update_col)){\r\n                \r\n                req(x %in% proj_res[[input$select_la]]$projections$update_col,cancelOutput = T)\r\n                \r\n            }\r\n            \r\n            yNm<-unname(controls_lookup[names(controls_lookup)==x])\r\n            \r\n            if(grepl(\"%\",yNm)){\r\n                limits=c(0,100)\r\n            }else{\r\n                \r\n                limits<-c(0,max(chart_df[[x]])*2)\r\n            }\r\n            \r\n            lineStyles<-list(a=amLine(color = \"#a6cee3\"))\r\n            \r\n            names(lineStyles)[1]<-x\r\n            \r\n            amLineChart(\r\n                data=chart_df,\r\n                xValue=\"week\",\r\n                yValues=x,\r\n                yAxis=amText(text=yNm,fontSize = 10),\r\n                xAxis=\"\",\r\n                draggable=T,\r\n                animated=F,\r\n                xLimits=c(min(chart_df$week),max(chart_df$week)),\r\n                yLimits=limits,\r\n                lineStyle = lineStyles\r\n            )\r\n        })\r\n        \r\n        inp_var<-paste0(\"plot_\",x,\"_change\")\r\n        \r\n        observeEvent(input[[inp_var]],ignoreNULL=T,ignoreInit=T,{\r\n            \r\n            new_dat<-isolate(proj_res[[input$select_la]]$projections$intervention)\r\n            \r\n            \r\n            new_x<-input[[inp_var]]$x - 1\r\n            \r\n            new_y<-round(input[[inp_var]]$y)\r\n            \r\n            var_change<-input[[inp_var]]$variable\r\n            \r\n            new_dat[[var_change]][new_dat$week>=new_x]<-new_y\r\n            \r\n            \r\n            init_backlog<-backlog_calc(1,input$num_nWaiting,new_dat,followup_backlog = input$num_nWaiting_follow)\r\n            \r\n            new_dat$backlog[1]<-init_backlog$init_appts_backlog\r\n            \r\n            new_dat$backlog_follow[1]<-init_backlog$followup_backlog\r\n            \r\n            for(x in 2:nrow(new_dat)){\r\n                \r\n                backlog_out<-backlog_calc(x,new_dat$backlog[x-1],new_dat,new_dat$backlog_follow[x-1])\r\n                \r\n                new_dat$backlog[x]<-backlog_out$init_appts_backlog\r\n                \r\n                new_dat$backlog_follow[x]<-backlog_out$followup_backlog\r\n                \r\n            }\r\n            \r\n            new_dat$diff<-new_dat$backlog - new_dat$sus_waitlist_size\r\n            \r\n            proj_res[[input$select_la]]$projections$intervention<-new_dat\r\n            \r\n            proj_res[[input$select_la]]$projections$update_col<-var_change\r\n            \r\n        })\r\n        \r\n    })\r\n    \r\n    \r\n    \r\n}\r\n","type":"text"},{"name":"ui.R","content":"#\r\n# This is the user-interface definition of a Shiny web application. You can\r\n# run the application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nrequire(rAmCharts4)\r\nrequire(ggplot2)\r\nrequire(reactable)\r\nrequire(shinyjs)\r\n\r\n\r\n\r\ncontrols_lookup<-c(\"new_ref\"=\"New referrals per week\",\r\n                   \"acc_ref\"=\"Accepted referrals rate (%)\",\r\n                   \"appt_init\"=\"Initial appts available per week\",\r\n                   \"dna_init\"=\"Initial appts utilisation rate (%)\",\r\n                   \"followup_perc\"=\"% requiring 2nd appt\",\r\n                   \"appt_follow\"=\"2nd appts available per week\",\r\n                   \"left\"=\"Number leaving waiting list per week\",\r\n                   \"reref\"=\"Re-Referral rate (% of rejected referrals)\",\r\n                   \"reref_lag\"=\"Average weeks to re-referral\")\r\n\r\n# Define UI for application that draws a histogram\r\nfluidPage(title=\"Waiting list projections tool\", theme=bslib::bs_theme(version=4),\r\n          \r\n          useShinyjs(),\r\n          \r\n          div(\r\n            div(h1(\"Waiting list projections tool\",style=\"margin-top: 1rem;\"),style=\"width: 49%; display: inline-block;\"),\r\n          div(style=\"display: inline-block; width: 49%; margin-right: auto; margin-left: 0;z-index: 1002; position: fixed;\",\r\n              div(uiOutput(\"ui_la_select\"),style=\"width: max-content; display: inline-block;\"),\r\n              div(actionButton(\"btn_reset\",\"Reset\"),style=\"width: max-content; display: inline-block;\"),\r\n              div(actionButton(\"btn_toggle\",\"'Do nothing' assumptions\"),style=\"width: max-content; display: inline-block;\")\r\n          )\r\n          ),\r\n          \r\n          hidden(\r\n              div(id=\"baseline_controls\",\r\n                  h3(\"'Do nothing' projection assumptions\"),\r\n                  uiOutput(\"ui_baseline_controls\")\r\n                  )\r\n          ),\r\n          \r\n          \r\n          \r\n          div(style=\"position: sticky; top:0; z-index: 1000; background-color: #FFFF; margin-top: 10px;\",\r\n              div(style=\"width: 60%; display: inline-block; vertical-align:top;\",\r\n                  amChart4Output(\"proj_plot\",height = 350)\r\n              )\r\n          ,\r\n          div(style=\"width: 38%; display: inline-block;;\",\r\n              div(style=\"margin-top: 2rem;\",\r\n                reactableOutput(\"proj_tb\")\r\n              )\r\n              \r\n          )\r\n          ),\r\n          \r\n          div(\r\n          h3(\"'To be' projection assumptions\"),\r\n          div(style=\"overflow-x: scroll; white-space: nowrap; overflow-y: hidden;\",\r\n            lapply(names(controls_lookup),function(x){\r\n              \r\n                  div(class=\"card\",style=\"display: inline-block; width: 500px;\",\r\n                    h4(controls_lookup[names(controls_lookup)==x]),\r\n                  amChart4Output(paste0(\"plot_\",x),height=250)\r\n                  )\r\n            \r\n          })\r\n          )\r\n          )\r\n          \r\n          \r\n)\r\n","type":"text"},{"name":"baseline_assumptions.xlsx","content":"UEsDBBQABgAIAAAAIQBi7p1oXgEAAJAEAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIo\noAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACslMtOwzAQRfdI/EPkLUrcskAINe2CxxIq\nUT7AxJPGqmNbnmlp/56J+xBCoRVqN7ESz9x7MvHNaLJubbaCiMa7UgyLgcjAVV4bNy/Fx+wl\nvxcZknJaWe+gFBtAMRlfX41mmwCYcbfDUjRE4UFKrBpoFRY+gOOd2sdWEd/GuQyqWqg5yNvB\n4E5W3hE4yqnTEOPRE9RqaSl7XvPjLUkEiyJ73BZ2XqVQIVhTKWJSuXL6l0u+cyi4M9VgYwLe\nMIaQvQ7dzt8Gu743Hk00GrKpivSqWsaQayu/fFx8er8ojov0UPq6NhVoXy1bnkCBIYLS2ABQ\na4u0Fq0ybs99xD8Vo0zL8MIg3fsl4RMcxN8bZLqej5BkThgibSzgpceeRE85NyqCfqfIybg4\nwE/tYxx8bqbRB+QERfj/FPYR6brzwEIQycAhJH2H7eDI6Tt77NDlW4Pu8ZbpfzL+BgAA//8D\nAFBLAwQUAAYACAAAACEAtVUwI/QAAABMAgAACwAIAl9yZWxzLy5yZWxzIKIEAiigAAIAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKySTU/DMAyG70j8h8j31d2QEEJLd0FIuyFUfoBJ3A+1\njaMkG92/JxwQVBqDA0d/vX78ytvdPI3qyCH24jSsixIUOyO2d62Gl/pxdQcqJnKWRnGs4cQR\ndtX11faZR0p5KHa9jyqruKihS8nfI0bT8USxEM8uVxoJE6UchhY9mYFaxk1Z3mL4rgHVQlPt\nrYawtzeg6pPPm3/XlqbpDT+IOUzs0pkVyHNiZ9mufMhsIfX5GlVTaDlpsGKecjoieV9kbMDz\nRJu/E/18LU6cyFIiNBL4Ms9HxyWg9X9atDTxy515xDcJw6vI8MmCix+o3gEAAP//AwBQSwME\nFAAGAAgAAAAhAHVsA7GLAwAA4QgAAA8AAAB4bC93b3JrYm9vay54bWysVW1v4jgQ/n7S/Yco\n39PYeQOiwiqvukptVVG2vZWQkJs4ja9JzDlOoar2v984ENouqxPXPQR2PJ48fmbmGXP+ZVtX\n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\nCgCAAgAAOCMAAAAA","type":"binary"}]
